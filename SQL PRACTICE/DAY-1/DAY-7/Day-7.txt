Day-7 work:


Retrieve all users along with their corresponding department details (employee_id, employee_name, department_id, department_name).

mysql> SELECT e.employee_id, e.employee_name, e.department_id, d.department_name FROM Employee e JOIN Department d ON e.department_id = d.department_id;
+-------------+---------------+---------------+-----------------+
| employee_id | employee_name | department_id | department_name |
+-------------+---------------+---------------+-----------------+
|           1 | Alvin         |             1 | HR              |
|           2 | Ambani        |             1 | HR              |
|           3 | Tony          |             2 | Finance         |
|           4 | John          |             2 | Finance         |
|           5 | Shreyas       |             3 | Development     |
+-------------+---------------+---------------+-----------------+
5 rows in set (0.00 sec)


Find the total number of users in each department and display the department details (department_id, department_name) along with the user count.

mysql> SELECT d.department_id, d.department_name, COUNT(e.employee_id) AS user_count FROM Department d LEFT JOIN Employee e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name;
+---------------+-----------------+------------+
| department_id | department_name | user_count |
+---------------+-----------------+------------+
|             1 | HR              |          2 |
|             2 | Finance         |          2 |
|             3 | Development     |          1 |
+---------------+-----------------+------------+
3 rows in set (0.00 sec)

Retrieve the user details (employee_id, employee_name) for users who belong to a specific department.

mysql> SELECT employee_id, employee_name FROM Employee WHERE department_id = 1;
+-------------+---------------+
| employee_id | employee_name |
+-------------+---------------+
|           1 | Alvin         |
|           2 | Ambani        |
+-------------+---------------+
2 rows in set (0.00 sec)


Calculate the average salary for each department and display the department details (department_id, department_name) along with the average salary.

SELECT e.department_id, d.department_name, AVG(e.salary) AS average_salary FROM Employee e JOIN Department d ON e.department_id = d.department_id GROUP BY e.department_id, d.department_name;
+---------------+-----------------+----------------+
| department_id | department_name | average_salary |
+---------------+-----------------+----------------+
|             1 | HR              |    5500.000000 |
|             2 | Finance         |    6000.000000 |
|             3 | Development     |    7000.000000 |
+---------------+-----------------+----------------+
3 rows in set (0.01 sec)


Find the departments with the highest total salary expenditure and display the department details (department_id, department_name) along with the total salary amount.

mysql> SELECT e.department_id, d.department_name, SUM(e.salary) AS total_salary_expenditure FROM Employee e JOIN Department d ON e.department_id = d.department_id GROUP BY e.department_id, d.department_name HAVING SUM(e.salary) = ( SELECT MAX(total_salary) FROM ( SELECT department_id, SUM(salary) AS total_salary FROM Employee GROUP BY department_id ) AS department_salary );
+---------------+-----------------+--------------------------+
| department_id | department_name | total_salary_expenditure |
+---------------+-----------------+--------------------------+
|             2 | Finance         |                 12000.00 |
+---------------+-----------------+--------------------------+
1 row in set (0.00 sec)

Retrieve the user details (employee_id, employee_name) for users who have a salary above a certain threshold.

mysql> SELECT employee_id, employee_name FROM Employee WHERE salary > 5000;
+-------------+---------------+
| employee_id | employee_name |
+-------------+---------------+
|           2 | Ambani        |
|           3 | Tony          |
|           4 | John          |
|           5 | Shreyas       |
+-------------+---------------+
4 rows in set (0.00 sec)

Find the departments with no users and display the department details (department_id, department_name).

mysql> SELECT d.department_id, d.department_name FROM Department d LEFT JOIN Employee e ON d.department_id = e.department_id WHERE e.employee_id IS NULL;
Empty set (0.01 sec)

Retrieve the user details (employee_id, employee_name) for users who have the same salary as their department's average salary.

mysql> SELECT e.employee_id, e.employee_name FROM Employee e JOIN (SELECT department_id, AVG(salary) AS avg_salary FROM Employee GROUP BY department_id ) AS dept_avg_salary ON e.department_id = dept_avg_salary.department_id WHERE e.salary = dept_avg_salary.avg_salary;
+-------------+---------------+
| employee_id | employee_name |
+-------------+---------------+
|           5 | Shreyas       |
+-------------+---------------+
1 row in set (0.01 sec)

Calculate the minimum and maximum salary across all departments and display the department details (department_id, department_name) along with the respective minimum and maximum salaries.

mysql> SELECT e.department_id, d.department_name, MIN(e.salary) AS min_salary, MAX(e.salary) AS max_salary FROM Employee e JOIN Department d ON e.department_id = d.department_id GROUP BY e.department_id, d.department_name;
+---------------+-----------------+------------+------------+
| department_id | department_name | min_salary | max_salary |
+---------------+-----------------+------------+------------+
|             1 | HR              |    5000.00 |    6000.00 |
|             2 | Finance         |    5500.00 |    6500.00 |
|             3 | Development     |    7000.00 |    7000.00 |
+---------------+-----------------+------------+------------+
3 rows in set (0.00 sec)


Retrieve the user details (employee_id, employee_name) for users who have the highest salary in their respective department.

mysql> SELECT e.employee_id, e.employee_name FROM Employee e JOIN ( SELECT department_id, MAX(salary) AS max_salary FROM Employee GROUP BY department_id ) AS dept_max_salary ON e.department_id = dept_max_salary.department_id AND e.salary = dept_max_salary.max_salary;
+-------------+---------------+
| employee_id | employee_name |
+-------------+---------------+
|           2 | Ambani        |
|           4 | John          |
|           5 | Shreyas       |
+-------------+---------------+
3 rows in set (0.00 sec)



What are the different types of joins in SQL?

The different types of joins in SQL are:

INNER JOIN: Returns only the matching rows between two tables.
LEFT JOIN: Returns all rows from the left (or first) table and the matching rows from the right (or second) table.
RIGHT JOIN: Returns all rows from the right (or second) table and the matching rows from the left (or first) table.
FULL JOIN: Returns all rows from both tables, including the unmatched rows. (Some database systems do not support FULL JOIN directly, but it can be achieved using other join types.)
CROSS JOIN: Produces the Cartesian product of both tables, resulting in all possible combinations of rows.
SELF JOIN: Joins a table with itself.


2.Explain the difference between INNER JOIN and OUTER JOIN.
The difference between INNER JOIN and OUTER JOIN is as follows:

INNER JOIN only returns the rows where there is a match between the joined tables based on the specified join condition. 
OUTER JOIN returns all the rows from one table and the matching rows from the other table based on the join condition.

3.What is the purpose of the ON clause in a join statement?
The purpose of the ON clause in a join statement is to specify the join condition. It determines how the tables should be connected by defining the columns or expressions on which the tables should be matched.

4.What is a self-join? Can you provide an example scenario where a self-join is useful?
A self-join is when a table is joined with itself. It is useful when you want to compare rows within the same table. For example, consider a table called "Employees" with columns such as "EmployeeID," "FirstName," and "ManagerID." To retrieve the names of employees and their corresponding managers, you can perform a self-join on the "Employees" table using the "ManagerID" column.

5.Explain the difference between a LEFT JOIN and a RIGHT JOIN.

LEFT JOIN returns all rows from the left (or first) table and the matching rows from the right (or second) table. If there is no match, NULL values are filled in for the columns of the right table.
RIGHT JOIN returns all rows from the right (or second) table and the matching rows from the left (or first) table. If there is no match, NULL values are filled in for the columns of the left table.

6.When would you use a CROSS JOIN in a query?
A CROSS JOIN is used to generate the Cartesian product of two tables, resulting in all possible combinations of rows between the tables. It is useful when you need to combine every row from one table with every row from another table, without any specific join condition.

7.What is the difference between a natural join and an equijoin?
A natural join and an equijoin are similar in that they both involve joining tables based on matching column values. However, there is a subtle difference:

Natural join automatically matches columns with the same name in both tables. It eliminates duplicate columns and performs the join based on those common columns.
Equijoin explicitly specifies the join condition using the equality operator (=) to compare specific columns in the joined tables.

8.How can you retrieve the rows that exist in one table but not in another using a join?
To retrieve the rows that exist in one table but not in another using a join, you can use an outer join and check for NULL values in the columns of the table that should have a match. For example, to find the rows in "TableA" that do not have a corresponding match in "TableB," you would perform a LEFT JOIN between the two tables and add a condition in the WHERE clause to filter the rows where the columns from "TableB" are NULL.

9.What is the purpose of using aliases in join statements?
Aliases in join statements provide shorthand names for tables, making the SQL code more concise and readable. They are often used to differentiate between columns with the same name in joined tables and can also simplify complex join conditions.

10.Can you explain the concept of a composite key and how it can be used in joins?
A composite key is a key that consists of multiple columns in a table. It is used to uniquely identify a row in the table by considering the combination of values in the composite key columns. In joins, a composite key can be used as a join condition by comparing the corresponding columns in the joined tables.

11.How can you optimize a join operation for better performance?
*Proper indexing: Ensure that the columns used in join conditions are indexed appropriately.
*Selective column retrieval: Specify only the necessary columns in the SELECT clause to minimize the data retrieved.
*Query optimization: Use proper query tuning techniques, such as rewriting the query, restructuring the join order, or using hints provided by the database system.
*Data normalization: Normalize the tables and eliminate redundant data to improve join performance.
*Using temporary tables: Create temporary tables to store intermediate results and perform joins on smaller subsets of data.

12.Explain the difference between a join and a subquery.
A join combines data from two or more tables based on a related column between them. A subquery is a query nested within another query. It can be used to retrieve data to be used in a join condition or for filtering the result set of a join. A join directly combines columns from different tables, while a subquery retrieves data independently and then integrates it into the main query.

13.What is the result of a join if there are no matching rows in the related table?
If there are no matching rows in the related table, an INNER JOIN will not return any rows. However, an OUTER JOIN (LEFT, RIGHT, or FULL) will still return the rows from the table that does not have a match, filling the columns of the unmatched table with NULL values.

14.What is the order of precedence for multiple joins in a single query?
The order of precedence for multiple joins in a single query depends on the join keywords used and the parentheses used to group the joins. Generally, the joins are evaluated from left to right, with the exception of explicit parentheses that override the default order. It is recommended to use parentheses to make the join order explicit and avoid ambiguity.

15.How can you avoid duplicate rows when joining multiple tables?
To avoid duplicate rows when joining multiple tables, we can use the DISTINCT keyword or apply appropriate grouping and aggregation functions. DISTINCT eliminates duplicate rows from the result set, while grouping and aggregation functions (e.g., GROUP BY, SUM, COUNT) allow you to consolidate and summarize the data based on certain criteria.