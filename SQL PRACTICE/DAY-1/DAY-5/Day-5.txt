select department,count(EmployeeID) from employees group by department having count(EmployeeID)>1;

select department,avg(salary) from employees group by department having avg(salary)>5000;


select department,max(salary),count(EmployeeID) from employees group by department having max(salary)20000 and count(EmployeeID)3;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.Calculate the total sales amount for each salesperson, but only display salespersons who have a total sales amount exceeding $50,000.


select product_name,count(id) from Sales group by product_name having count(id)>2;

select product_name,count(id),avg(total_price) as Average_price from Sales group by product_name having avg(total_price)>2000 and count(id)>2;

select product_name,sum(total_price) from Sales group by product_name having sum(total_price)>5000;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
***A FOREIGN KEY*** is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table. The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.

The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.

The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Table Name: Orders Columns: - order_id (Primary Key) - customer_id (Foreign Key referencing Customers table) - order_date - total_amount - shipping_address - status

Table Name: Customers Columns: - customer_id (Primary Key) - customer_name - email - phone_number - address - city - state

In the "Orders" table, there is a foreign key constraint on the customer_id column, which references the primary key column customer_id in the "Customers" table. This establishes the relationship between the two tables.


CREATE TABLE Customers (
    customer_id int NOT NULL,
    customer_name varchar(255),
    email varchar(255),
    phone_number varchar(20),
    address varchar(255),
    city varchar(100),
    state varchar(100),
    PRIMARY KEY (customer_id)
);

CREATE TABLE Orders (
    order_id int NOT NULL,
    customer_id int,
    order_date date,
    total_amount decimal,
    shipping_address varchar(20),
    status varchar(50),
    PRIMARY KEY (order_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

 CREATE TABLE Products (
    product_id int NOT NULL,
    product_name varchar(255),
    category_id int,
    price decimal,
    quantity int,
    PRIMARY KEY (product_id),
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);
 CREATE TABLE Categories (
    category_id int NOT NULL,
    category_name varchar(100),
    PRIMARY KEY (category_id)
);
 CREATE TABLE Employees (
    employee_id int NOT NULL,
    first_name varchar(100),
    last_name varchar(100),
    department_id int,
    hire_date date,
    salary decimal,
    PRIMARY KEY (employee_id),
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);
 CREATE TABLE Courses (
    course_id int NOT NULL,
    course_name varchar(100),
    PRIMARY KEY (course_id)
);
CREATE TABLE Students (
    student_id int NOT NULL,
    student_name varchar(100),
    date_of_birth date,
    PRIMARY KEY (student_id)
);

INSERT INTO Customers (customer_id, customer_name, email, phone_number, address, city, state)
VALUES 
    (1, 'John Doe', 'johndoe@example.com', '1234567890', '123 Main St', 'Cityville', 'Stateville'),
    (2, 'Jane Smith', 'janesmith@example.com', '0987654321', '456 Elm St', 'Townsville', 'Stateville'),
    (3, 'Alice Johnson', 'alicejohnson@example.com', '9876543210', '789 Oak St', 'Villagetown', 'Stateville'),
    (4, 'Bob Williams', 'bobwilliams@example.com', '6549873210', '321 Pine St', 'Townsville', 'Stateville'),
    (5, 'Emily Davis', 'emilydavis@example.com', '1237894560', '555 Maple Ave', 'Cityville', 'Stateville');

INSERT INTO Orders (order_id, customer_id, order_date, total_amount, shipping_address, status)
VALUES
    (1, 1, '2023-07-01', 99.99, '123 Main St', 'Shipped'),
    (2, 2, '2023-07-02', 199.99, '456 Elm St', 'Processing'),
    (3, 3, '2023-07-03', 49.99, '789 Oak St', 'Processing'),
    (4, 4, '2023-07-04', 149.99, '321 Pine St', 'Shipped'),
    (5, 5, '2023-07-05', 299.99, '555 Maple Ave', 'Processing');
--------------------------------------------------------------------------------------


A "JOIN" clause is used to combine rows from two or more tables, based on a related column between them.

"INNER JOIN"
This JOIN returns all records from multiple tables that satisfy the specified join condition.

syntax:-

SELECT columns    
FROM table1    
INNER JOIN table2 ON condition1    
INNER JOIN table3 ON condition2 


1.Retrieve all customer records along with their corresponding order details (customer_id, customer_name, order_id, order_date, total_amount).
SELECT customers.customer_id, customers.customer_name, orders.order_id, orders.order_date, orders.total_amount
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id;


2.Retrieve all order records along with the corresponding customer details (order_id, order_date, total_amount, customer_id, customer_name)
SELECT orders.order_id, orders.order_date, orders.total_amount, customers.customer_id, customers.customer_name
FROM orders
INNER JOIN customers ON orders.customer_id = customers.customer_id;

3.Retrieve the customer details (customer_id, customer_name) for customers who have placed orders.
SELECT c.customer_id, c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id;

4.Retrieve the customer details (customer_id, customer_name) along with the total order count for each customer.
SELECT customers.customer_id, customers.customer_name, COUNT(orders.order_id) AS total_order_count
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id, customers.customer_name;

5.Retrieve the customer details (customer_id, customer_name) for customers who have placed orders with a total amount above a 5000
SELECT c.customer_id, c.customer_name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
WHERE
o.total_amount > 5000;

6.Retrieve the customer details (customer_id, customer_name) for customers who have not placed any orders.
select c.customer_id,c.customer_name from customers c inner join orders o on c.customer_id = o.customer_id where o.order_id = null;





